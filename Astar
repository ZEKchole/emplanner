// Astar算法流程
// 初始化open_list和close_list列表
// 将起点加入open_list列表中
// 开始循环open_list列表，不为空则一直循环下去
// 将openlist中的最下值给current节点
// 如果当前节点是end节点，结束循环，返回close_list列表中的值
// 若当前节点不是end节点
// 寻找当前节点的邻节点，计算其代价值
// 判断当前邻节点是否已经在open_list中，不在则加入open_list
// 在，则判断经当前节点到邻节点的G值是否小于起始点不经过当前节点到其的G值
// 如小于，则更新邻节点的父节点，不小于跳出，执行后续过程
// 直到将end加入close_list列表，循环结束
// 此算法没有回退机制，不能处理口袋阵情况
#include <iostream>
#include <cmath>
#include <queue>
#include <vector>

// 生成节点类，存放节点数据 横向位置 纵向位置 G H F值以及父节点
class Node
{
public:
	int x,y;
	int g,h,f;
	Node* parent;
};
// 定义比较函数，队列中自定义函数的排序需要自定义比较函数
struct CompareNodes
{
	// 大顶堆 a>b 则最小的排在队列最前面
	bool operator()(const Node* a, const Node* b)
	{
		return a->f > b->f;
	}
};
// 可视化输出
void printMapWithRoute(int map[][6], const std::vector<Node*> path) 
{
	for (const auto& node : path) {
		map[node->x][node->y] = 2;
	}
	
	for (int x = 0; x < 6; x++) 
	{
		for (int y = 0; y < 6; y++) 
		{
			if (map[x][y] == 0) 
			{
				std::cout << "*";
			}
			else if (map[x][y] == 1) 
			{
				std::cout << "#";
			}
			else if (map[x][y] == 2) 
			{
				std::cout << "\033[1;31mX\033[0m";
			}
		}
		std::cout << std::endl;
	}
}
// 计算曼哈顿距离
int manhattanDistance(const Node* a, const Node* b)
{
	return abs(a->x - b->x) + abs(a->y - b->y);
}
// Astar主体
std::vector<Node*> astar(int map[][6], int start_x, int start_y, int end_x, int end_y)
{
	// 初始化起点和终点
	Node* start = new Node{ start_x,start_y,0,0,0,nullptr };
	Node* end = new Node{ end_x,end_y,0,0,0,nullptr };
	// 初始化开放列表和关闭列表
	std::priority_queue<Node*, std::vector<Node*>, CompareNodes> openlist;
	std::vector<Node*> closelist;
	// 将起点加入openlist
	openlist.push(start);
	// 循环
	while (!openlist.empty())
	{
		// 将openlist中的最小的节点给current
		Node* current = openlist.top();
		openlist.pop();
		// 判断此节点是不是终点
		if (current->x == end_x && current->y == end_y)
		{

			// 返回closelist
			std::vector<Node*> path;
			// 开始遍历所有的父节点
			while (current != nullptr)
			{
				path.push_back(current);
				current = current->parent;
			}
			// 不能在这里进行堆区数据的释放，因为如果在这里释放了，那么接下来return path 回去的将是一段未操作的内存
			//for (Node* node : closelist)
			//{
			//	delete node;
			//}
			return path;
		}
		// 不是终点，加入closelist
		closelist.push_back(current);
		// 遍历当前节点的邻节点
		for (int i = -1; i <= 1; i++)
		{
			for (int j = -1; j <= 1; j++)
			{
				if (i == 0 && j == 0)
				{
					continue;
				}
				int x = current->x + i;
				int y = current->y + j;
				// 若邻节点超过网格或者是障碍物，则直接进入下一个循环
				if (x < 0 || y < 0||x>5||y>5||map[x][y]==1)
				{
					continue;
				}
				// 创建邻节点
				Node* neighbor = new Node{ x,y,0,0,0,current };
				// 计算邻节点的代价
				neighbor->g = current->g + 1;
				neighbor->h = manhattanDistance(neighbor, end);
				neighbor->f = neighbor->g + neighbor->h;

				// 判断邻节点是否在closelist中
				bool inCloseList = false;
				for (Node* node: closelist)
				{
					if (node->x == neighbor->x && node->y == neighbor->y)
					{
						inCloseList = true;
						break;
					}
				}
				if (inCloseList)
				{
					delete neighbor;
					continue;
				}

				// 如果邻节点已经在开放列表中，则更新其代价函数的值
				bool inOpenList = false;
				// 不能直接对queue进行访问，先将queue里面的对象导入vector中
				std::vector<Node*> openlist_temp;
				while (!openlist.empty())
				{
					openlist_temp.push_back(openlist.top());
					openlist.pop();
				}
				// opnelist中的节点全部转移到vector中，openlist为空
				// 遍历openlist_temp
				for (Node* node : openlist_temp)
				{
					if (node->x == neighbor->x && node->y == neighbor->y)
					{
						inOpenList = true;
						if (neighbor -> g < node->g)
						{
							// 更新节点的代价
							node->g = neighbor->g;
							node->f = node->g + node->h;
							node->parent = neighbor->parent;
						}
						delete neighbor;
						break;
					}
				}
				// vector中的节点已经更新，将vector中的节点转移到openlist
				for (Node* node : openlist_temp)
				{
					openlist.push(node);
				}
				//// 释放vector
				//for (Node* node : openlist_temp)
				//{
				//	delete node;
				//}
				if (inOpenList)
				{
					continue;
				}
				// 若邻节点不在openlist 则将邻节点加入openlist
				neighbor->g = current -> g + 1;
				neighbor->h = manhattanDistance(neighbor, end);
				neighbor->f = neighbor->g + neighbor->h;
				openlist.push(neighbor);

				
			}
		}
	}
	// 如果开放列表为空
	delete start;
	delete end;
	for (Node* node : closelist)
	{
		delete node;
	}
	return std::vector<Node*>();
}
int main()
{
	int map[6][6] = {
		{0,0,0,0,0,0},
		{0,1,0,0,1,0},
		{0,1,0,1,1,0},
		{0,1,0,0,1,0},
		{0,1,1,0,0,0},
		{0,0,0,0,0,0}
	};
	// 运行Astar算法
	std::vector<Node*>path = astar(map,0,0,5,4);
	// 输出路径
	if (path.empty()) 
	{
		std::cout << "No path found." << std::endl;
	}
	else 
	{
		std::cout << "Path: ";
		for (auto iter = path.rbegin(); iter != path.rend(); iter++) 
		{
			Node* node = *iter;
			std::cout << "(" << node->x << "," << node->y << ")";
			if (iter + 1 != path.rend()) 
			{
				std::cout << "->";
			}
		}
		std::cout << std::endl;
	}
	std::cout << "*是可行路径" << std::endl;
	std::cout << "#是障碍物" << std::endl;
	std::cout << "X是Astar寻优的路径" << std::endl;
	printMapWithRoute(map, path);
	// 在堆区开辟的节点，需要手动释放，因为返回的是指针直接指向的是堆区，所以直接对path进行释放
	for (Node* node : path)
	{
		delete node;
	}
	return 0;
}
